{"version":3,"sources":["../src/dataSources/DataSource.ts","../src/dataSources/WarehouseDataSource.ts","../src/dataSources/StoreDataSource.ts","../src/dataSources/ProductDataSource.ts","../src/dataSources/InboundDataSource.ts","../src/dataSources/OutboundDataSource.ts","../src/auth/index.ts","../src/config/endpoints.ts","../src/config/index.ts"],"sourcesContent":["import {Response, Endpoints, FetchOptions} from \"../types\";\n\nexport default class DataSource {\n    protected readonly fetch: <T>(endpoint: string, options?: FetchOptions) => Promise<Response<T>>;\n    protected readonly endpoints: Endpoints;\n\n    constructor(fetch: <T>(endpoint: string, options?: FetchOptions) => Promise<Response<T>>, endpoints: Endpoints) {\n        this.fetch = fetch;\n        this.endpoints = endpoints;\n    }\n}\n","import DataSource from \"./DataSource\";\nimport {Warehouse} from '../types'\n\nexport default class WarehouseDataSource extends DataSource {\n\n    async list() {\n        return await this.fetch<Warehouse[]>(this.endpoints.warehouses.index);\n    }\n}\n","import DataSource from \"./DataSource\";\nimport {Store, StoreCreateInput, StoreUpdateInput} from '../types'\n\nexport default class StoreDataSource extends DataSource {\n\n    async list(seller_id?: string, page?: number) {\n\n\n        let endpoint = this.endpoints.stores.index;\n        let urlSearchParams = new URLSearchParams();\n\n        if (seller_id) {\n            urlSearchParams.append('seller_id', seller_id)\n        }\n\n        if (page) {\n            urlSearchParams.append('page', page.toString())\n        }\n\n        if (urlSearchParams.size) {\n            endpoint += '?' + urlSearchParams;\n        }\n\n        return await this.fetch<Store[]>(endpoint);\n    }\n\n    async find(id: number) {\n        return await this.fetch<Store>(this.endpoints.stores.show(id));\n    }\n\n    async create(input: StoreCreateInput) {\n        return await this.fetch<Store>(this.endpoints.stores.create, {\n            method: 'POST',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async update(id: number, input: StoreUpdateInput) {\n        return await this.fetch<Store>(this.endpoints.stores.update(id), {\n            method: 'PUT',\n            body: JSON.stringify(input)\n        });\n    }\n}\n","import DataSource from \"./DataSource\";\nimport {Product, ProductCreateInput, ProductsFilter, ProductUpdateInput} from \"../types\";\n\nexport default class ProductDataSource extends DataSource {\n    async list(options: ProductsFilter) {\n        // distrust the options\n\n        const {\n            page,\n            sellerId,\n            sellerIds,\n            sku,\n            skus,\n            storeId,\n            storeIds\n        } = options;\n\n\n        let endpoint = this.endpoints.products.index;\n        let urlSearchParams = new URLSearchParams();\n\n\n        if (sku) {\n            urlSearchParams.append('sku', sku)\n        }\n\n        if (skus) {\n            skus.forEach(sku => urlSearchParams.append('skus[]', sku))\n        }\n\n        if (storeId) {\n            urlSearchParams.append('store_id', storeId.toString())\n        }\n\n        if (storeIds) {\n            storeIds.forEach(storeId => urlSearchParams.append('store_ids[]', storeId.toString()))\n        }\n\n        if (sellerId) {\n            urlSearchParams.append('seller_id', sellerId)\n        }\n\n        if (sellerIds) {\n            sellerIds.forEach(sellerId => urlSearchParams.append('seller_ids[]', sellerId))\n        }\n\n        if (page) {\n            urlSearchParams.append('page', page.toString())\n        }\n\n        if (urlSearchParams.size) {\n            endpoint += '?' + urlSearchParams;\n        }\n\n        return await this.fetch<Product[]>(endpoint);\n    }\n\n    async find(sku: string) {\n        return await this.fetch<Product>(this.endpoints.products.show(sku));\n    }\n\n    async create(input: ProductCreateInput) {\n        return await this.fetch<Product>(this.endpoints.products.create, {\n            method: 'POST',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async update(sku: string, input: ProductUpdateInput) {\n        return await this.fetch<Product>(this.endpoints.products.update(sku), {\n            method: 'PUT',\n            body: JSON.stringify(input)\n        });\n    }\n}\n","import DataSource from \"./DataSource\";\nimport {Inbound, InboundCreateInput, InboundsFilter, InboundUpdateInput} from \"../types\";\n\nexport default class InboundDataSource extends DataSource {\n    async list(options: InboundsFilter) {\n        // distrust the options\n\n        const {\n            page,\n            sellerId,\n            sellerIds,\n            storeId,\n            storeIds\n        } = options;\n\n\n        let endpoint = this.endpoints.inbounds.index;\n        let urlSearchParams = new URLSearchParams();\n\n        if (storeId) {\n            urlSearchParams.append('store_id', storeId.toString())\n        }\n\n        if (storeIds) {\n            storeIds.forEach(storeId => urlSearchParams.append('store_ids[]', storeId.toString()))\n        }\n\n        if (sellerId) {\n            urlSearchParams.append('seller_id', sellerId)\n        }\n\n        if (sellerIds) {\n            sellerIds.forEach(sellerId => urlSearchParams.append('seller_ids[]', sellerId))\n        }\n\n        if (page) {\n            urlSearchParams.append('page', page.toString())\n        }\n\n        if (urlSearchParams.size) {\n            endpoint += '?' + urlSearchParams;\n        }\n\n        return await this.fetch<Inbound[]>(endpoint);\n    }\n\n    async find(number: string) {\n        return await this.fetch<Inbound>(this.endpoints.inbounds.show(number));\n    }\n\n    async create(input: InboundCreateInput) {\n        return await this.fetch<Inbound>(this.endpoints.inbounds.create, {\n            method: 'POST',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async update(number: string, input: InboundUpdateInput) {\n        return await this.fetch<Inbound>(this.endpoints.inbounds.update(number), {\n            method: 'PUT',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async delete(number: string) {\n        return await this.fetch<Inbound>(this.endpoints.inbounds.delete(number), {\n            method: 'DELETE',\n        });\n    }\n}\n","import DataSource from \"./DataSource\";\nimport {Outbound, OutboundsFilter, OutboundCreateInput, OutboundUpdateInput} from \"../types\";\n\nexport default class OutboundDataSource extends DataSource {\n    async list(options: OutboundsFilter) {\n        // distrust the options\n\n        const {\n            page,\n            sellerId,\n            sellerIds,\n            storeId,\n            storeIds,\n            status,\n            sku,\n            skus\n        } = options;\n\n\n        let endpoint = this.endpoints.outbounds.index;\n        let urlSearchParams = new URLSearchParams();\n\n        if (storeId) {\n            urlSearchParams.append('store_id', storeId.toString())\n        }\n\n        if (storeIds) {\n            storeIds.forEach(storeId => urlSearchParams.append('store_ids[]', storeId.toString()))\n        }\n\n        if (sellerId) {\n            urlSearchParams.append('seller_id', sellerId)\n        }\n\n        if (sellerIds) {\n            sellerIds.forEach(sellerId => urlSearchParams.append('seller_ids[]', sellerId))\n        }\n\n        if (status) {\n            urlSearchParams.append('status', status)\n        }\n\n\n        if (sku) {\n            urlSearchParams.append('sku', sku)\n        }\n\n\n        if (skus) {\n            skus.forEach(sku => urlSearchParams.append('skus[]', sku))\n        }\n\n        if (page) {\n            urlSearchParams.append('page', page.toString())\n        }\n\n        if (urlSearchParams.size) {\n            endpoint += '?' + urlSearchParams;\n        }\n\n        return await this.fetch<Outbound[]>(endpoint);\n    }\n\n    async find(number: string) {\n        return await this.fetch<Outbound>(this.endpoints.outbounds.show(number));\n    }\n\n    async create(input: OutboundCreateInput) {\n        return await this.fetch<Outbound>(this.endpoints.outbounds.create, {\n            method: 'POST',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async update(number: string, input: OutboundUpdateInput) {\n        return await this.fetch<Outbound>(this.endpoints.outbounds.update(number), {\n            method: 'PUT',\n            body: JSON.stringify(input)\n        });\n    }\n\n    async delete(number: string) {\n        return await this.fetch<Outbound>(this.endpoints.outbounds.delete(number), {\n            method: 'DELETE',\n        });\n    }\n}\n","import {OAuth2Client, OAuth2Fetch} from '@badgateway/oauth2-client';\nimport {ClientPasswordParams, FetchOptions, ClientSettings, OAuth2Token, Response} from \"../types\";\n\nlet refreshTimer: NodeJS.Timeout | null = null;\n\nconst MAX_INT32 = 2147483647;\n\nexport const useFetch = (\n    config: {\n        clientSettings: ClientSettings,\n        clientPasswordParams: ClientPasswordParams,\n        storeTokenCallback: (token: OAuth2Token) => void,\n        getStoredTokenCallback: () => OAuth2Token | null,\n        loader?: {\n            start: () => void,\n            stop: () => void\n        }\n    }\n) => {\n\n    const {\n        clientSettings,\n        clientPasswordParams,\n        storeTokenCallback,\n        getStoredTokenCallback,\n        loader\n    } = config\n\n    const client = new OAuth2Client(clientSettings);\n\n    const fetchWrapper = new OAuth2Fetch({\n        client,\n        scheduleRefresh: false,\n        getNewToken: async () => {\n            return client.password(clientPasswordParams)\n        },\n        onError: (err) => {\n            console.log(\"error : \", err.message)\n        },\n        storeToken: (token) => {\n            storeTokenCallback(token)\n        },\n        getStoredToken: () => {\n            return getStoredTokenCallback();\n        }\n    });\n\n    const scheduleRefresh = (token: OAuth2Token) => {\n\n        if (refreshTimer) {\n            clearTimeout(refreshTimer);\n            refreshTimer = null;\n        }\n\n        if (!token?.expiresAt || !token.refreshToken) {\n            // If we don't know when the token expires, or don't have a refresh_token, don't bother.\n            return;\n        }\n\n        const expiresIn = token.expiresAt - Date.now();\n\n        // We only schedule this event if it happens more than 2 minutes in the future.\n        if (expiresIn < 120 * 1000) {\n            return;\n        }\n\n        // Schedule 1 minute before expiry\n        const ms = Math.min(expiresIn - 60 * 1000, MAX_INT32 - 1);\n\n        refreshTimer = setTimeout(async () => {\n            try {\n                fetchWrapper.refreshToken().then();\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.error('[fetch-mw-oauth2] error while doing a background OAuth2 auto-refresh', err);\n            }\n        }, ms);\n\n    }\n\n    const fetch = async <T>(endpoint: string, options?: FetchOptions) => {\n\n        loader?.start()\n\n        const response = await fetchWrapper.fetch(endpoint, {\n            ...options,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            redirect: 'follow'\n        })\n\n        loader?.stop()\n\n        if (!response.ok) {\n            let message = await response.text();\n            throw new Error(message)\n        } else {\n            return await response.json() as Promise<Response<T>>;\n        }\n    };\n\n    return {\n        fetch,\n        scheduleRefresh\n    }\n}\n","import {Endpoints} from \"../types\";\n\nexport const getEndpoints = (server: string): Endpoints => {\n    return {\n        warehouses: {\n            index: `${server}/api/warehouses`,\n            create: `${server}/api/warehouses`,\n            show: (id: number) => `${server}/api/warehouses/${id}`,\n            update: (id: number) => `${server}/api/warehouses/${id}`,\n            delete: (id: number) => `${server}/api/warehouses/${id}`\n        },\n        stores: {\n            index: `${server}/api/stores`,\n            create: `${server}/api/stores`,\n            show: (id: number) => `${server}/api/stores/${id}`,\n            update: (id: number) => `${server}/api/stores/${id}`,\n            delete: (id: number) => `${server}/api/stores/${id}`\n        },\n        products: {\n            index: `${server}/api/products`,\n            create: `${server}/api/products`,\n            show: (sku: string) => `${server}/api/products/${sku}`,\n            update: (sku: string) => `${server}/api/products/${sku}`,\n            delete: (sku: string) => `${server}/api/products/${sku}`\n        },\n        inbounds: {\n            index: `${server}/api/inbounds`,\n            create: `${server}/api/inbounds`,\n            show: (number: string) => `${server}/api/inbounds/${number}`,\n            update: (number: string) => `${server}/api/inbounds/${number}`,\n            delete: (number: string) => `${server}/api/inbounds/${number}`\n        },\n        outbounds: {\n            index: `${server}/api/outbounds`,\n            create: `${server}/api/outbounds`,\n            show: (number: string) => `${server}/api/outbounds/${number}`,\n            update: (number: string) => `${server}/api/outbounds/${number}`,\n            delete: (number: string) => `${server}/api/outbounds/${number}`\n        }\n    };\n}\n\n","import {getEndpoints} from \"./endpoints\";\nimport {ClientPasswordParams, ClientSettings} from \"../types/\";\n\nexport const useConfig = (\n    config: {\n        server?: string,\n        clientId?: string,\n        clientSecret: string,\n        tokenEndpoint?: string,\n        username: string,\n        password: string\n    }\n) => {\n\n    const {\n        server = \"https://beta-api.slimani.dev\",\n        clientId = \"2\",\n        clientSecret,\n        tokenEndpoint = \"/oauth/token\",\n        password = \"admin\",\n        username = \"password\"\n    } = config\n\n    const clientSettings: ClientSettings = {\n        server,\n        clientId,\n        clientSecret: clientSecret,\n        tokenEndpoint,\n    };\n\n    const clientPasswordParams: ClientPasswordParams = {\n        username, password,\n    }\n\n    const endpoints = getEndpoints(server)\n\n    return {clientSettings, clientPasswordParams, endpoints}\n}\n"],"mappings":"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","names":["sku","storeId","sellerId","storeId","sellerId","storeId","sellerId","sku"]}